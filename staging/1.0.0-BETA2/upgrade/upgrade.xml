<upgrade>
	<system_note>The database and version listed in the config.xml file should 
	ALWAYS match.
	
	To determine which section in matching to use, heed only the information 
	beneath the tag that indicates the current database version (for 5.2.4, 
	you would find information under matching for "v5.2.4").  This section 
	indicates the version that it should upgrade the database to 
	("target_version"), the name of the script ("script_name"), the class name 
	("class_name"), and the name of the method within that class ("call_method") 
	to call in order to perform the upgrade.  The method should return TRUE on 
	success: anything else would indicate failure.  Upgrade failure may leave 
	the system in an inconsistent state.
	
	IMPORTANT: in order to facilitate doing multiple version upgrades, the name 
	of the class must be UNIQUE to all the other classes.  For this reason, the 
	class name should be something like "v1_0_0_ALPHA1__to__v1_0_0_ALPHA2".</system_note>
	
	<matching>
		<v1.0.0-ALPHA1>
			<target_version>1.0.0-ALPHA2</target_version>
		</v1.0.0-ALPHA1>
		<v1.0.0-ALPHA2>
			<target_version>1.0.0-ALPHA3</target_version>
			<script_name>upgradeTo1.0.0-ALPHA3.php</script_name>
			<class_name>upgradeTo1_0_0_ALPHA3</class_name>
			<call_method>run_upgrade</call_method>
		</v1.0.0-ALPHA2>
		<v1.0.0-ALPHA3>
			<target_version>1.0.0-ALPHA4</target_version>
		</v1.0.0-ALPHA3>
		<v1.0.0-ALPHA4>
			<target_version>1.0.0-ALPHA5</target_version>
		</v1.0.0-ALPHA4>
		<v1.0.0-ALPHA5>
			<target_version>1.0.0-BETA1</target_version>
		</v1.0.0-ALPHA5>
		<v1.0.0-BETA1>
			<target_version>1.0.0-BETA2</target_version>
		</v1.0.0-BETA1>
	</matching>
</upgrade>