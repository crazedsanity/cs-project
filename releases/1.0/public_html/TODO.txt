$Id:TODO.txt 784 2007-06-07 21:13:21Z danf $


RELEASE NOTES FOR BETA-3.2:::

Major schema changes (there were many "small" changes not listed here):
	* The "rts" and "project_table" tables were merged into a single table, "record_table", to simplify milestones without creating a 
	bunch of duplicated data.  
	* Issues are flagged as such by the "is_helpdesk_issue" boolean.  
	* The displayed value for projects and issues are held in the "public_id" column, which is derived using a special sequence for 
	projects and another for issues.
	* issues now use tags instead of categories.
	* removed several unneeded columns in several tables
	* all columns and all tables converted to English names (no more German)
	* better logic for logging database errors.
	* more activities are logged.
	* Removal of "estimate_table" (all estimates stored in todo's and logged in the "log_estimate_table".

Removed Functionality (not a complete list):
	* linking a helpdesk issue to a project
	* changing the parent of an existing project
	* old preferences (the few that were available) weren't saved, and there is no system in place yet to update preferences.
	* there is no "aim" for projects anymore, since it was redundant with the name and description.

Improved Functionality:
	* issues now use definable tags instead of a rigid set of categories (multiple tags can be assigned to the same issue, like 
	"dev" and "bug"--instead of creating a bunch of new categories with the "DEV - " prefix to denote the same).
	* display of existing notes & todos improved: no longer uses disabled inputs, instead displaying HTML/text for those items.
	* issues use separate note records for each remark.
	* solutions to issues are also stored as notes (the record has a flag set to indicate that it's a solution)
	* multiple solutions are easy to spot (there's a checkmark icon beside them).
	* slightly nicer notification emails.
	* simplified filtering for issues (maybe a limitation--can't specify which field should be searched).
	* the "ancestry" is always verified before being set, to avoid new orphans; existing orphans remain (for now).
	* preferences for sorting, start module, & display of todo's & issues in project details.
	* more configurable items, fewer hard-coded items (especially pertaining to session code).
	* external libraries for (eventually) handling non-project-specific stuff, like session, XML stuff, and templates.






PLANNED FOR NEXT MAJOR RELEASE::::

GENERAL::: 
 1.) ability to change ancestry of records
 	a.) move record as non-associated (ancestry_level=1)
 	b.) move as sub-record of another project
 	c.) ensure sub-records have their ancestry & ancestry_level updated properly--use PostgreSQL "overlay()" function
 2.) (DONE)
 3.) Search Tab
 	a.) remove the "search-like" abilities in helpdesk & from mainRecord{}
 	b.) allow searching of projects, issues, or both
 	c.) ability to limit to only those with certain tags
 	d.) cache search criteria for returning to the page
 4.) (DONE)
 5.) (DONE)
 6.) Project Display
 	a.) sorting todo's based upon user preferences: 
 		i.) active items at the top
 		ii.) pending middle
 		iii.) completed at the bottom.
 7.) (DONE)
 8.) Creating Helpdesk Issues
 	a.) allow ability to select multiple tags during the creation phase
 	b.) tag as a bug by default...
 9.) Emails for remarks on issues ("Update to Helpdesk Issue #<blah>" don't show who made the comment in the email.






FUTURE CONSIDERATIONS:::

GENERAL:::
 1.) anonymous viewing of helpdesk issues & associated todo's (don't use "/extern" anymore)
 2.) anonymous viewing of projects
 3.) Milestones!
 4.) anonymous viewing of milestones!
 5.) non-version-controlled site config
 	* use an XML file
 	* ensure that new settings (from new releases) have some way of getting in
 	* automatic creation if the file isn't there
 6.) web-based upgrades
 	* force users to an administration page (only administrator-accessible) when code has higher version than db
 	* do something crazy if database has higher/different version than code
 	* facility for checking web to see if newer version available
 	* see also #9.
 7.) database-driven permissions system (check out phpGACL: http://phpgacl.sourceforge.net/)
 	* code simply defines the name of the permission a user needs in order to see/do something
 	* generic permissions for authenticated vs. non-authenticated users
 	* group-specific permissions
 	* record-specific permissions (define which records can/can't be viewed)
 8.) handle ancestry changes for non-helpdesk issues appropriately (fail if it leaves orphans, allow otherwise).
 	* instead of selecting from a drop-down (always problematic), click a link, & select from the main listing...
 	* use the postgresql "overlay()" function to handle the move query.
 9.) Automatic upgrades, based upon VERSION file (see further down, "SCRIPTED UPGRADES").
 		
10.) Automatic Logging Options
 	* use CONSTANTS in classes for declaring the recordTypeId and logCategoryId.
 	* add items to config.xml to list each of the afore-mentioned constants.
 	* upgrades that add new items can add stuff to the config.xml, and the classes can just reference constants 
 	by the given config name.

HELPDESK:
 1.) change stuff to reference "helpdesk" instead of "rts"
 2.) create a (required?) field for issues, via an attribute, to allow:
 	* revision of code
 	* version
 	* list of affected files
 	* path to branch (i.e. "svn://hugs/pl/website/trunk", "//hugs/pl/website/branches/dev", etc).
 3.) link other issues to it (use ancestry to show dependencies -- this allows only very simple dependencies).
 4.) linking todo's
 5.) calculating hours remaining (based on todo estimates)
 6.) linking multiple contacts to an issue (and sending them an email on updates, too)
 7.) when viewing helpdesk issues anonymously, adhere to the "is_internal" setting...
 	* should the submitter be able to see the issue if it's internal?
 	* should the submitter still receive notifications (if the submitter was anonymous)?
 	
 	
 	
 	
 	
 	
 	
 	
 	
=================================================================================
SCRIPTED UPGRADES
 1.) initial check:
	a.) check if "UPGRADING_config.xml" exists.
		i.) NO: go to #2
		ii.) YES: display message saying upgrade is running
	b.) check versions (see #2): assuming no death, are they different?
		i.) NO: proceed as normal
		ii.) YES: upgrade (go to #3)
	c.) NOTE: the VERSION file should, as far as I can think, ALWAYS have the 
	most current version number; it should NEVER be manually changed.
	
 2.) Check versions:
 	a.) condition for "no upgrade":
 		i.) config.xml == VERSION == db version
 	b.) conditions for "performing valid upgrade":
 		i.) VERSION > (config.xml == db version)
 		ii.) (VERSION == config.xml) > db version
 	c.) conditions for "bad version"
 		i.) any condition not in 2-a & 2-b
 	
 3.) UPGRADING PROCESS (valid upgrade found: die if any step fails)
 	a.) copy lib/config.xml to lib/UPGRADING_config.xml
 	b.) run script ("upgrades/<OLD_VERSION>_to_<NEW_VERSION>.php"
 		i.) check that "lib/UPGRADING_config.xml" exists with OLD_VERSION
 		ii.) check that db version matches NEW_VERSION
 		iii.) start transaction
 		iv.) perform schema changes (stored procs, new tables, etc)
 		v.) perform data migrations
 		vi.) update database version
 		vii.) update version in "lib/config.xml"
 		viii.) commit transaction
 		ix.) check version that "lib/config.xml" == "VERSION" == db version
 		x.) perform updates/additions/deletions to "lib/config.xml"
 		xi.) perform validation tests (needed after previous step?)
 		xii.) delete "lib/UPGRADING_config.xml"
 		xiii.) UPGRADE COMPLETE!
=================================================================================



=================================================================================
UPGRADE TESTING:
 1.) after running upgrade, run some sort of scripted unit tests to ensure that  everything works like it's supposed to.
 2.) possibly update sequences to be the way they were prior to testing.
=================================================================================







REQUIREMENTS FOR 1.0 (NON-BETA) RELEASE (includes previously-listed items):
 1.) PHProjekte stuff
 	* rename files properly, no German (update templates to point to new images)
 	* configurable logo
 	* remove references to PHProjekte (put reference to it in the docs as being the system that cs-project was based upon)
 2.) Configuration
 	* update config file via administrative interface (which does NOT require db connection... maybe require a certain user, with an md5 
 	of their password stored in a file somewhere, updated when that user's password is updated)
 	* upgrades able to check for new/updated parameters & add/update them
 	* store version (major, minor, maintenance, & versionString)
 3.) Initial Setup
 	* Webpage for doing the initial setup (possibly also creates db & loads schema)
 	* setup first user(s)
 	* create preferences
 	* create groups
 	* build initial tag list
 4.) Upgrades
 	* Able to check URL for updates?
 	* sanity checker for verifying modified files (ensure templates have been updated, scripts & libraries have changed, etc)--maybe 
 	file with list of changed files & their md5's (include deleted files).
 5.) Registration
 	* allow users to register for access
 	* newly-registered users must be granted access by an administrator (is_admin=TRUE)
 	* newly-registered users without access privileges can still view unmodifiable records
 		- ability to leave comments/notes
 		- add/remove themselves from involvement/notifications for a record
 6.) Contact Modification
 	* users can modify their own contact information (must update appropriate items in session)
 	* admins can update all contacts
 	* admins can set contacts as active/inactive
 	
 	
 
 